# Conversion..
1.>    Decimal to base 'b' --> keep dividing by base, take remainders and write in opposite
2.>    Convert any base 'b' to Decimal --> multiply and add the power of base with digit

# Shift operator..
1.>    Left shift operator (<<) --> multiply by 2
2.>    Right Shift operator (>>) --> divide by 2

##General point:
1.> a << b = a * 2^b
2.> a >> b = a / 2^b


#Questions
1.> Find the 'i'th bit
2.> Set the 'i'th bit (i.e. make the 'i'th bit 1)
3.> Reset the 'i'th bit (i.e. make the 'i'th bit 0)
4.> Find the position of the Right most set bit (EX:- 1011010 = Ans: 2, because from Right side 1 is at 2nd place)
5.> Find the position of the Left most set bit (EX:- 1011010 =  Ans: 4, because from Left side 1 is at 4th place)
6.> Find the unique number(i.e. a number only present only 1 time), while other number present 3 times
    (Hint: calculate count of the set bits at each bit of given numbers and modulo with 3 then remainin bit gives the unique number)
7.> Find the 'n'th magic number
    (Hint: n'th magic number is the number which has 'n' 1's)
    Example:
    1 = 001 => 5 (5^1)
    2 = 010 => 25 (5^2)
    3 = 011 => 30 (5^2 + 5^1)
    4 = 100 => 125 (5^3)
    5 = 101 => 130 (5^3 + 5^1)
8.> Find the 'n'th gray code number
9.> Find the sum of 'n'th row in pascal triangle
    (Hint: sum of each row = 2^n)
    (For 'n'th row sum = 2^(n-1))
    (For code hint: 1 << (n-1)) = 1 * 2^(n-1)
10.> You are given a number, find out if its power of 2 or not.
(Hint: check if the number is power of 2 or not by using bitwise AND operator, if (n & (n-1) == 0) then n is power of 2)



Q.> How to convert +ve Decimal value in binary to -ve Decimal value in binary?
A.> 1.> Take the 1's complement of the binary number. 2
>   2.> Add 1 to the 1's complement of the binary number. 
>   3.> It means 2's complement gives -ve of the number.

#Range of number
1.> 1 byte = 8 bits = 2^8 = 256 (b/c in 1 bit you can store either 1 or 0, and 1 byte = 8 bits so total number that can formed 2^8)
    >> MSB(Most Significant Bit) or 8th bit is to store sign(i.e. 1 for -ve & 0 for +ve) 
    >> So, actual number is sotred in bits = n-1 (i.e in 1 byte: 7 bits used to store)
    >> so, total different number can formed is 2^7 = 128
    >> so, total Range is -128 to 127 (i.e. 256)
2.> 2 byte = 16 bits = 2^16 = 65536
    >> MSB(Most Significant Bit) or 16th bit is to store sign(i.e. 1 for -ve & 0 for +ve) 
    >> So, actual number is sotred in bits = n-1 (i.e in 2 byte: 15 bits used to store)
    >> so, total different number can formed is 2^15 = 32,768
    >> so, total Range is -32,768 to 32,767 (i.e. 65536)

##Range formula: 
    [ -2^(n-1) to 2^(n-1) - 1 ]
